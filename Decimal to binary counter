#1/18/2025
#include <stdio.h>
char *decToBinary(int n) {
  // array to store binary number
  int binaryNum[8] = {0, 0, 0, 0, 0, 0, 0, 0};

  // counter for binary array
  int i = 0;
  while (n > 0) {
    // storing remainder in binary array
    binaryNum[i] = n % 2 + 0;
    n = n / 2;
    i++;
  }
  /* odd parity = 0, even parity = 1 */
  // printing binary array in reverse order
  for (int j = 8 - 1; j >= 0; j--)
    printf("%d", binaryNum[j]);
  printf("\n");
  /*printf("%d",binaryNum[0]);
  if (binaryNum[0] == 1) {
    p = 1;
    printf("%d",p);
    printf("true");
  }
  else {
    p = 0;
    printf("%d",p);
    printf("false");
  }
*/
}

void count1s0s(int N) {
  // Initialise count variables
  int count0 = 0, count1 = 0;

  // Iterate through all the bits
  while (N > 0) {

    // If current bit is 1
    if (N & 1) {
      count1++;
    }

    // If current bit is 0
    else {
      count0++;
    }
    if (count0 + count1 != 8) {
      count0 = 8 - count1;
      N = N >> 1;
    }
  }
  /*if (p == 1) {
    if (count1 % 2 == 0){
      printf("Pass\n");
    }
    else{
      printf("Failed\n");
    }
    }
  else {
    if (count1 % 2 == 0){
      printf("1\n");
    }
    else{
      printf("0\n");
    }*/
  if (count1 % 2 == 0) {
    int p = 0;
    /*printf("&d", p);*/
    p++;
  } else {
    printf("Failed 1 is not a even count\n");
  }

  // Print the count
  printf("Count of 0s in N is %d\n", count0);
  printf("Count of 1s in N is %d\n", count1);
}
int main(void) {
  int n = 3;
  printf("binary = ");
  decToBinary(n);
  count1s0s(n);

  return 0;
}

/*void count1s0s(int N)
{
    // Initialise count variables
    int count0 = 0, count1 = 0;

    // Iterate through all the bits
    while (N > 0) {

        // If current bit is 1
        if (N & 1) {
            count1++;
        }

        // If current bit is 0
        else {
            count0++;
        }

        N = N >> 1;
    }

    // Print the count
    printf("Count of 0s in N is %d\n", count0);
    printf("Count of 1s in N is %d\n", count1);
}*/

/*char *decToBinary(int n)
{
    // array to store binary number
    static char binaryNum[32] = {0};
    int i = 0;
    while (n > 0) {
        binaryNum[i] = (n % 2) + '0';
        n = n / 2;
        i++;
    }
    if (i < 8){
      for (int i = i + 1; i == 8; i++)
        binaryNum[i] = '0';
    }

    binaryNum[i] = '\0'; // add null terminator
    char temp;
    int start = 0;
    int end = i - 1;
    while (start < end) {
        temp = binaryNum[start];
        binaryNum[start] = binaryNum[end];
        binaryNum[end] = temp;
        start++;
        end--;
    }
    return binaryNum;
}*/
